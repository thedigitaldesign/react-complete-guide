React - The Complete Guide

------------------
---- Video 12 ----
------------------
let and const
    - let: This is the new var, this is used for variables that can be updated
    - const: This will be used most of the time in in React, this is used for values that will never change after set.

------------------
---- Video 13 ----
------------------
Arrow functions
    - Arrow functions have their own lexical this. When we use arrow functions, we don't have to manually bind them to the class.
    
        - Longhand
            const multiply = (number) => {
                return number * 2
            }
            console.log(multiply(2))
            :: 4

        - Shorthand:    If all you do is return and you have no other code in the function, you can use this shorthand.
                        = number =>, if and only if you have a single parameter can you omit the parentheses
            
            const multiply = number => number * 2
            console.log(multiply(2))
            :: 4

------------------
---- Video 14 ----
------------------
- person.js
    const person = {name: 'Josh'}
    export default person

- utility.js
    export const clean = () => {...}
    export const baseData = 10;

- app.js
    - NOTE: Since this exports as default, we can assign it to a variable 
    import person from './person.js'
    //import variable_name from './person.js'

    - NOTE: The curly braces are used to explicitly target things from the file. They are called "named exports"
    import {baseData} from './utility.js'
    import {clean} from './utility.js'
    -- OR --
    import {baseData as variable_name} from './utility.js'
    import * as variable_name from './utility.js'
    - NOTE: import * as variable_name, will grab all exports and bundle them into an object which exposes all constants and exports as properties

------------------
---- Video 15 ----
------------------
    class Person {
        // Property
        name = 'Josh'
        // Method
        age = () => {...}
    }

    // Usage
    const myPerson = new Person()
    myPerson.name
    myPerson.age()

    // Inheritance
    class Person extends other_class

    // Example - ES6
    class Human {
        // constructor() is optional
        constructor() {
            this.gender = 'male'
        }

        printGender() {
            console.log(this.gender)
        }
    }

    class Person extends Human {
        constructor() {
            //-- NOTE: super() is needed if you are using constructors, it's a keyword, and it simply executes the parent constructor
            super()
            this.name = 'Josh'
        }

        printMyName() {
            console.log(this.name)
        }
    }

    const person = new Person()
    person.printMyName()
    person.printGender()

------------------
---- Video 16 ----
------------------
    // Example - ES7
    class Human {
        gender = 'male'

        printGender = () => {
            console.log(this.gender)
        }
    }

    class Person extends Human {
        name = 'Josh'

        printMyName = () => {
            console.log(this.name)
        }
    }

    const person = new Person()
    person.printMyName()
    person.printGender()

------------------
---- Video 17 ----
------------------
Spread & Rest Operators
    - ...

    Spread 
        - Used to split up array elements OR object properties
            const newArray = [...oldArray, 1, 2]            //--    This will take all the elements of the oldArray and add 1 and 2 to the newArray
            const newObject = {...oldObject, newProp: 5}    //--    This will take all the properties out of the oldObject and put them into the newObject as 
                                                                    key-value-pairs. Also, if oldObject has the property of newProp, the newObject's newProp will 
                                                                    override the oldObject's newProp

    Rest
        - Used to merge a list of function arguments into an array
            function sortArgs(...args) {
                return args.sort()
            }

            // Example
            const filter = (...args) => {
                return args.filter(el => el === 1)
            }

            console.log(filter(1, 2, 3))
            :: [1]

------------------
---- Video 18 ----
------------------
 Destructuring
    - This is different then Spread because (...) spread takes all of the properties, where destructuring targets an individual property
        
    Array
        [a,b] = ['Hello', 'Josh']

        console.log(a)
        console.log(b)
        :: Hello
        :: Josh

        // Example
        const numbers = [1, 2, 3]
        [num1, num2] = numbers
        console.log(num1, num2)
        :: 1
        :: 2

        [num1, ,num3] = numbers
        console.log(num1, num3)
        :: 1
        :: 3


    Object
        {name} = {name: 'Josh', age: 38}    //--    The {name} on the left side is targeting the property on the right side, which is why when 
                                                    calling age will return undefined

        console.log(name)
        console.log(age)
        :: Josh
        :: undefined

------------------
---- Video 19 ----
------------------
Reference and primitive types

    Primitive - numbers, strings, booleans
        const number = 1
        const secondNumber = number //-- This is a direct copy of the primitive

    Reference - objects and arrays
        const person =  {
            name: 'Josh'
        }

        const secondPerson = person //-- This creats a pointer to person which is in memory

        person.name = 'Rebekah'
        console.log(secondPerson)
        :: Rebekah

        //-- This happens because secondPerson is pointing to the object in memory, if person gets updated so will secondPerson

    Immutable copy of object
        const secondPerson = {
            ...person
        }

        person.name = 'Rebekah'
        console.log(secondPerson)
        :: Josh

------------------
---- Video 20 ----
------------------
Refreshing array functions

    // Example
    const numbers = [1, 2, 3]
    const doubleNumArray = numbers.map((num) => {
        return num * 2
    })

------------------------------------------------------------------------------------------------------------------------------------------------

Creating React app with Node
- Install node.js

Install Facebook/create-react-app
> npm install -g create-react-app

Create app
> create-react-app my-app

Success! Created assignment-1 at D:\Code\Tutorials\React\Udemy\react-complete-guide\assignments\assignment-1
Inside that directory, you can run several commands:

  npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you canâ€™t go back!

We suggest that you begin by typing:

  cd assignment-1
  npm start

Happy hacking!


---------------------
---- SCSS Module ----
---------------------
npm install node-sass --save

https://facebook.github.io/create-react-app/docs/adding-a-sass-stylesheet

Should you want to preprocess a stylesheet with Sass then make sure to change the stylesheet file extension as 
follows: [name].module.scss or [name].module.sass.









